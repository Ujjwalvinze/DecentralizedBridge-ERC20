{
  "address": "0x5e03dcBF5021780291C27f81c1bCbaCE529C682a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "InvalidSignature",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum State",
          "name": "st",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "TransferComplete",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "senderAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recieverAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "TransferInitiated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "initiateTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "mintTransferredAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4096e91c8e4042b342ba8b2bb5971a72e4b207ce57e6661146ba4cb52f0165a3",
  "receipt": {
    "to": null,
    "from": "0x89A4e662CCb3819F881f488dBa96c35093Eec624",
    "contractAddress": "0x5e03dcBF5021780291C27f81c1bCbaCE529C682a",
    "transactionIndex": 15,
    "gasUsed": "713083",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xcf4e2faeb158b59f378016932ca2208479f84576925b69c1f8902a64776f685f",
    "transactionHash": "0x4096e91c8e4042b342ba8b2bb5971a72e4b207ce57e6661146ba4cb52f0165a3",
    "logs": [],
    "blockNumber": 9443579,
    "cumulativeGasUsed": "7593927",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x86d652518D782fF4224b6Cd1e22372b5E641e7c3"
  ],
  "numDeployments": 1,
  "solcInputHash": "189b8ec62b3391939616b7f4199071e7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum State\",\"name\":\"st\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"TransferComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"senderAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recieverAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"TransferInitiated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"initiateTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"mintTransferredAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Bridge.sol\":\"Bridge\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"contracts/Bridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IOurToken.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nenum State {\\n    Inititated,\\n    Pending,\\n    Complete\\n}\\n\\nerror InvalidSignature(address);\\n\\ncontract Bridge is ReentrancyGuard {\\n    IOurToken private s_token;\\n\\n    event TransferInitiated(\\n        address senderAddress,\\n        address recieverAddress,\\n        uint256 amount,\\n        uint256 nonce,\\n        bytes signature\\n    );\\n\\n    event TransferComplete(State st, address from, address to, uint256 amount, uint256 nonce);\\n\\n    constructor(address _token) {\\n        s_token = IOurToken(_token);\\n    }\\n\\n    function initiateTransfer(\\n        address to,\\n        uint256 amount,\\n        uint256 nonce,\\n        bytes calldata signature\\n    ) public nonReentrant {\\n        s_token.burn(msg.sender, amount);\\n        emit TransferInitiated(msg.sender, to, amount, nonce, signature); // add add amount symbol\\n    }\\n\\n    function mintTransferredAmount(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 nonce,\\n        bytes calldata signature\\n    ) public nonReentrant {\\n        bytes32 messageHash = keccak256(abi.encodePacked(from, to, amount, nonce));\\n        bytes32 signedMessagehash = prefixed(messageHash);\\n        address toVerify = recoverSigner(signedMessagehash, signature);\\n\\n        if (toVerify != from) revert InvalidSignature(toVerify);\\n\\n        s_token.mint(to, amount);\\n\\n        emit TransferComplete(State.Complete, from, to, amount, nonce);\\n    }\\n\\n    function prefixed(bytes32 hash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    function recoverSigner(bytes32 message, bytes memory sig) internal pure returns (address) {\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n\\n        (v, r, s) = splitSignature(sig);\\n\\n        return ecrecover(message, v, r, s);\\n    }\\n\\n    function splitSignature(bytes memory sig) internal pure returns (uint8, bytes32, bytes32) {\\n        require(sig.length == 65);\\n\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        assembly {\\n            // first 32 bytes, after the length prefix\\n            r := mload(add(sig, 32))\\n            // second 32 bytes\\n            s := mload(add(sig, 64))\\n            // final byte (first byte of the next 32 bytes)\\n            v := byte(0, mload(add(sig, 96)))\\n        }\\n\\n        return (v, r, s);\\n    }\\n}\\n\",\"keccak256\":\"0xdff0cc1579b0d974af2b6120e127e4aa814b9b402eb36e19402fea4f9567fad0\",\"license\":\"MIT\"},\"contracts/IOurToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\ninterface IOurToken is IERC20 {\\n    function burn(address ownerAddress, uint256 amount) external;\\n\\n    function mint(address ownerAddress, uint256 amount) external;\\n\\n    function getSymbol() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x5f130dbd151ce6a350e3a3d2b8950761c68994e7e27c64010b3f1177b7a3a5bc\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610c33380380610c33833981810160405281019061003291906100e4565b600160008190555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610111565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100b182610086565b9050919050565b6100c1816100a6565b81146100cc57600080fd5b50565b6000815190506100de816100b8565b92915050565b6000602082840312156100fa576100f9610081565b5b6000610108848285016100cf565b91505092915050565b610b13806101206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80635ac3fecf1461003b578063a9e0ae5e14610057575b600080fd5b61005560048036038101906100509190610589565b610073565b005b610071600480360381019061006c9190610611565b61015a565b005b61007b610344565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac33866040518363ffffffff1660e01b81526004016100d89291906106c9565b600060405180830381600087803b1580156100f257600080fd5b505af1158015610106573d6000803e3d6000fd5b505050507f8a93be667c751fa05ed3198a6ac64a2ff8ffb262b0aeddacfb866692886d308b33868686868660405161014396959493929190610750565b60405180910390a1610153610394565b5050505050565b610162610344565b60008686868660405160200161017b9493929190610815565b604051602081830303815290604052805190602001209050600061019e8261039e565b905060006101f08286868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506103ce565b90508873ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461026257806040517fd855c4f40000000000000000000000000000000000000000000000000000000081526004016102599190610863565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1989896040518363ffffffff1660e01b81526004016102bf9291906106c9565b600060405180830381600087803b1580156102d957600080fd5b505af11580156102ed573d6000803e3d6000fd5b505050507ffb8e08134fa3d8347032db37fa1db115d95aaa81528a4762a654e05bc750e9a460028a8a8a8a6040516103299594939291906108f5565b60405180910390a150505061033c610394565b505050505050565b6002600054141561038a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610381906109a5565b60405180910390fd5b6002600081905550565b6001600081905550565b6000816040516020016103b19190610a47565b604051602081830303815290604052805190602001209050919050565b6000806000806103dd85610443565b8093508194508295505050506001868484846040516000815260200160405260405161040c9493929190610a98565b6020604051602081039080840390855afa15801561042e573d6000803e3d6000fd5b50505060206040510351935050505092915050565b6000806000604184511461045657600080fd5b60008060006020870151925060408701519150606087015160001a90508083839550955095505050509193909250565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006104bb82610490565b9050919050565b6104cb816104b0565b81146104d657600080fd5b50565b6000813590506104e8816104c2565b92915050565b6000819050919050565b610501816104ee565b811461050c57600080fd5b50565b60008135905061051e816104f8565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261054957610548610524565b5b8235905067ffffffffffffffff81111561056657610565610529565b5b6020830191508360018202830111156105825761058161052e565b5b9250929050565b6000806000806000608086880312156105a5576105a4610486565b5b60006105b3888289016104d9565b95505060206105c48882890161050f565b94505060406105d58882890161050f565b935050606086013567ffffffffffffffff8111156105f6576105f561048b565b5b61060288828901610533565b92509250509295509295909350565b60008060008060008060a0878903121561062e5761062d610486565b5b600061063c89828a016104d9565b965050602061064d89828a016104d9565b955050604061065e89828a0161050f565b945050606061066f89828a0161050f565b935050608087013567ffffffffffffffff8111156106905761068f61048b565b5b61069c89828a01610533565b92509250509295509295509295565b6106b4816104b0565b82525050565b6106c3816104ee565b82525050565b60006040820190506106de60008301856106ab565b6106eb60208301846106ba565b9392505050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b600061072f83856106f2565b935061073c838584610703565b61074583610712565b840190509392505050565b600060a08201905061076560008301896106ab565b61077260208301886106ab565b61077f60408301876106ba565b61078c60608301866106ba565b818103608083015261079f818486610723565b9050979650505050505050565b60008160601b9050919050565b60006107c4826107ac565b9050919050565b60006107d6826107b9565b9050919050565b6107ee6107e9826104b0565b6107cb565b82525050565b6000819050919050565b61080f61080a826104ee565b6107f4565b82525050565b600061082182876107dd565b60148201915061083182866107dd565b60148201915061084182856107fe565b60208201915061085182846107fe565b60208201915081905095945050505050565b600060208201905061087860008301846106ab565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600381106108be576108bd61087e565b5b50565b60008190506108cf826108ad565b919050565b60006108df826108c1565b9050919050565b6108ef816108d4565b82525050565b600060a08201905061090a60008301886108e6565b61091760208301876106ab565b61092460408301866106ab565b61093160608301856106ba565b61093e60808301846106ba565b9695505050505050565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b600061098f601f83610948565b915061099a82610959565b602082019050919050565b600060208201905081810360008301526109be81610982565b9050919050565b600081905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b6000610a06601c836109c5565b9150610a11826109d0565b601c82019050919050565b6000819050919050565b6000819050919050565b610a41610a3c82610a1c565b610a26565b82525050565b6000610a52826109f9565b9150610a5e8284610a30565b60208201915081905092915050565b610a7681610a1c565b82525050565b600060ff82169050919050565b610a9281610a7c565b82525050565b6000608082019050610aad6000830187610a6d565b610aba6020830186610a89565b610ac76040830185610a6d565b610ad46060830184610a6d565b9594505050505056fea2646970667358221220ed4499b482d0fe45d5ba4e6f3e0960254cc359da93ca46e53a31023ca1b7920b64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c80635ac3fecf1461003b578063a9e0ae5e14610057575b600080fd5b61005560048036038101906100509190610589565b610073565b005b610071600480360381019061006c9190610611565b61015a565b005b61007b610344565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac33866040518363ffffffff1660e01b81526004016100d89291906106c9565b600060405180830381600087803b1580156100f257600080fd5b505af1158015610106573d6000803e3d6000fd5b505050507f8a93be667c751fa05ed3198a6ac64a2ff8ffb262b0aeddacfb866692886d308b33868686868660405161014396959493929190610750565b60405180910390a1610153610394565b5050505050565b610162610344565b60008686868660405160200161017b9493929190610815565b604051602081830303815290604052805190602001209050600061019e8261039e565b905060006101f08286868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506103ce565b90508873ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461026257806040517fd855c4f40000000000000000000000000000000000000000000000000000000081526004016102599190610863565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1989896040518363ffffffff1660e01b81526004016102bf9291906106c9565b600060405180830381600087803b1580156102d957600080fd5b505af11580156102ed573d6000803e3d6000fd5b505050507ffb8e08134fa3d8347032db37fa1db115d95aaa81528a4762a654e05bc750e9a460028a8a8a8a6040516103299594939291906108f5565b60405180910390a150505061033c610394565b505050505050565b6002600054141561038a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610381906109a5565b60405180910390fd5b6002600081905550565b6001600081905550565b6000816040516020016103b19190610a47565b604051602081830303815290604052805190602001209050919050565b6000806000806103dd85610443565b8093508194508295505050506001868484846040516000815260200160405260405161040c9493929190610a98565b6020604051602081039080840390855afa15801561042e573d6000803e3d6000fd5b50505060206040510351935050505092915050565b6000806000604184511461045657600080fd5b60008060006020870151925060408701519150606087015160001a90508083839550955095505050509193909250565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006104bb82610490565b9050919050565b6104cb816104b0565b81146104d657600080fd5b50565b6000813590506104e8816104c2565b92915050565b6000819050919050565b610501816104ee565b811461050c57600080fd5b50565b60008135905061051e816104f8565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261054957610548610524565b5b8235905067ffffffffffffffff81111561056657610565610529565b5b6020830191508360018202830111156105825761058161052e565b5b9250929050565b6000806000806000608086880312156105a5576105a4610486565b5b60006105b3888289016104d9565b95505060206105c48882890161050f565b94505060406105d58882890161050f565b935050606086013567ffffffffffffffff8111156105f6576105f561048b565b5b61060288828901610533565b92509250509295509295909350565b60008060008060008060a0878903121561062e5761062d610486565b5b600061063c89828a016104d9565b965050602061064d89828a016104d9565b955050604061065e89828a0161050f565b945050606061066f89828a0161050f565b935050608087013567ffffffffffffffff8111156106905761068f61048b565b5b61069c89828a01610533565b92509250509295509295509295565b6106b4816104b0565b82525050565b6106c3816104ee565b82525050565b60006040820190506106de60008301856106ab565b6106eb60208301846106ba565b9392505050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b600061072f83856106f2565b935061073c838584610703565b61074583610712565b840190509392505050565b600060a08201905061076560008301896106ab565b61077260208301886106ab565b61077f60408301876106ba565b61078c60608301866106ba565b818103608083015261079f818486610723565b9050979650505050505050565b60008160601b9050919050565b60006107c4826107ac565b9050919050565b60006107d6826107b9565b9050919050565b6107ee6107e9826104b0565b6107cb565b82525050565b6000819050919050565b61080f61080a826104ee565b6107f4565b82525050565b600061082182876107dd565b60148201915061083182866107dd565b60148201915061084182856107fe565b60208201915061085182846107fe565b60208201915081905095945050505050565b600060208201905061087860008301846106ab565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600381106108be576108bd61087e565b5b50565b60008190506108cf826108ad565b919050565b60006108df826108c1565b9050919050565b6108ef816108d4565b82525050565b600060a08201905061090a60008301886108e6565b61091760208301876106ab565b61092460408301866106ab565b61093160608301856106ba565b61093e60808301846106ba565b9695505050505050565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b600061098f601f83610948565b915061099a82610959565b602082019050919050565b600060208201905081810360008301526109be81610982565b9050919050565b600081905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b6000610a06601c836109c5565b9150610a11826109d0565b601c82019050919050565b6000819050919050565b6000819050919050565b610a41610a3c82610a1c565b610a26565b82525050565b6000610a52826109f9565b9150610a5e8284610a30565b60208201915081905092915050565b610a7681610a1c565b82525050565b600060ff82169050919050565b610a9281610a7c565b82525050565b6000608082019050610aad6000830187610a6d565b610aba6020830186610a89565b610ac76040830185610a6d565b610ad46060830184610a6d565b9594505050505056fea2646970667358221220ed4499b482d0fe45d5ba4e6f3e0960254cc359da93ca46e53a31023ca1b7920b64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 162,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "s_token",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IOurToken)406"
      }
    ],
    "types": {
      "t_contract(IOurToken)406": {
        "encoding": "inplace",
        "label": "contract IOurToken",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}